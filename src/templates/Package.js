// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Tag = require("../components/Tag.js");
var Icon = require("../bindings/Icon.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Flags = require("../components/Flags.js");
var Score = require("../components/Score.js");
var React = require("react");
var Config = require("../Config.js");
var Helmet = require("../bindings/gatsby/helmet.js");
var Vrroom = require("vrroom/src/Vrroom.bs.js");
var TimeAgo = require("../bindings/TimeAgo.js");
var Version = require("../components/Version.js");
var Platforms = require("../components/Platforms.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var TypedGlamor = require("bs-typed-glamor/src/TypedGlamor.bs.js");
var PackageStyles = require("../styles/PackageStyles.js");

((require('../../static/hljs.css')));

var component = ReasonReact.statelessComponent("Package");

function make(data, param) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */(function (_self) {
              ((
      document.querySelectorAll('.redex-codeblock.m-tabbed')
      .forEach(el => {
        el.querySelector('li.reason').addEventListener('click', () => {
          el.querySelectorAll('.reason').forEach(_ => _.classList.add('s-selected'));
          el.querySelectorAll('.ml').forEach(_ => _.classList.remove('s-selected'));
        });

        el.querySelector('li.ml').addEventListener('click', () => {
          el.querySelectorAll('.reason').forEach(_ => _.classList.remove('s-selected'));
          el.querySelectorAll('.ml').forEach(_ => _.classList.add('s-selected'));
        });
      })
    ));
              return /* () */0;
            }),
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (_self) {
              var $$package = data.package;
              var match = $$package.license;
              var tmp = { };
              var tmp$1 = Caml_option.nullable_to_opt($$package.homepageUrl);
              if (tmp$1 !== undefined) {
                tmp.href = Caml_option.valFromOption(tmp$1);
              }
              var tmp$2 = { };
              var tmp$3 = Caml_option.nullable_to_opt($$package.repositoryUrl);
              if (tmp$3 !== undefined) {
                tmp$2.href = Caml_option.valFromOption(tmp$3);
              }
              var tmp$4 = { };
              var tmp$5 = Caml_option.nullable_to_opt($$package.npmUrl);
              if (tmp$5 !== undefined) {
                tmp$4.href = Caml_option.valFromOption(tmp$5);
              }
              var tmp$6 = { };
              var tmp$7 = Caml_option.nullable_to_opt($$package.issuesUrl);
              if (tmp$7 !== undefined) {
                tmp$6.href = Caml_option.valFromOption(tmp$7);
              }
              var tmp$8 = { };
              var tmp$9 = Caml_option.nullable_to_opt($$package.docsUrl);
              if (tmp$9 !== undefined) {
                tmp$8.href = Caml_option.valFromOption(tmp$9);
              }
              return React.createElement("div", {
                          className: TypedGlamor.toString(PackageStyles.root)
                        }, ReasonReact.element(undefined, undefined, Helmet.make(Config.titleTemplate($$package.name), undefined, undefined, undefined, /* array */[])), React.createElement("header", {
                              className: TypedGlamor.toString(PackageStyles.header)
                            }, React.createElement("div", {
                                  className: TypedGlamor.toString(PackageStyles.props)
                                }, ReasonReact.element(undefined, undefined, Curry._2(Vrroom.Control[/* IfSome */3][/* make */1], Caml_option.nullable_to_opt($$package.stars), (function (stars) {
                                            return React.createElement("div", {
                                                        className: TypedGlamor.toString(PackageStyles.stars)
                                                      }, Vrroom.text(stars), ReasonReact.element(undefined, undefined, Icon.Star[/* make */0](TypedGlamor.toString(PackageStyles.starIcon), /* array */[])));
                                          }))), ReasonReact.element(undefined, undefined, Score.make($$package, /* array */[])), (match == null) ? React.createElement("div", {
                                        className: TypedGlamor.toString(PackageStyles.nolicense)
                                      }, Vrroom.text("No license")) : React.createElement("div", {
                                        className: TypedGlamor.toString(PackageStyles.license)
                                      }, Vrroom.text(match)), React.createElement("div", {
                                      className: TypedGlamor.toString(PackageStyles.updated)
                                    }, ReasonReact.element(undefined, undefined, TimeAgo.make($$package.updated, /* array */[])))), React.createElement("div", {
                                  className: TypedGlamor.toString(PackageStyles.title)
                                }, ReasonReact.element(undefined, undefined, Version.make($$package.version, $$package.type === "published", /* array */[])), ReasonReact.element(undefined, undefined, Platforms.make($$package.platforms, /* array */[]))), React.createElement("div", {
                                  className: TypedGlamor.toString(PackageStyles.descLine)
                                }, ReasonReact.element(undefined, undefined, Flags.make($$package, true, /* array */[])), React.createElement("span", {
                                      className: TypedGlamor.toString(PackageStyles.description)
                                    }, Vrroom.text($$package.description))), React.createElement("div", {
                                  className: TypedGlamor.toString(PackageStyles.tags)
                                }, ReasonReact.element(undefined, undefined, Icon.Tags[/* make */0](Caml_option.some(PackageStyles.tagsIcon), /* array */[])), ReasonReact.element(undefined, undefined, Tag.Category[/* make */2]($$package.category, /* array */[])), ReasonReact.element(undefined, undefined, Curry._3(Vrroom.Control[/* Map */0][/* make */1], $$package.keywords, undefined, (function (keyword) {
                                            return ReasonReact.element(keyword, undefined, Tag.Keyword[/* make */1](keyword, /* array */[]));
                                          })))), React.createElement("div", {
                                  className: TypedGlamor.toString(PackageStyles.links)
                                }, React.createElement("a", tmp, Vrroom.text("homepage")), React.createElement("a", tmp$2, Vrroom.text("repository")), React.createElement("a", tmp$4, Vrroom.text("npm")), React.createElement("a", tmp$6, Vrroom.text("issues")), React.createElement("a", tmp$8, Vrroom.text("documentation")))), React.createElement("div", {
                              className: TypedGlamor.toString(PackageStyles.readme),
                              dangerouslySetInnerHTML: {
                                __html: $$package.readme
                              }
                            }));
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

var $$default = ReasonReact.wrapReasonForJs(component, (function (jsProps) {
        return make(jsProps.data, /* array */[]);
      }));


  export const query = graphql`
    query PackageQuery($id: String!) {
      package: packages(id: { eq: $id }) {
        type
        id
        name
        version
        category
        flags
        platforms
        description
        keywords
        license
        updated
        stars
        score
        quality
        popularity
        maintenance
        readme
        homepageUrl
        repositoryUrl
        npmUrl
        issuesUrl

        slug
      }
    }
  `

;

var Styles = 0;

exports.Styles = Styles;
exports.component = component;
exports.make = make;
exports.$$default = $$default;
exports.default = $$default;
exports.__esModule = true;
/*  Not a pure module */
